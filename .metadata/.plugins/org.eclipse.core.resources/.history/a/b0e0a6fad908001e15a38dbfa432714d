package com.Employee.service;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.Employee.modal.Employee;

@Service
public class EmployeeService {
	
	List<Employee> employee1 = new LinkedList<>();
	
	
	public List<Employee> saveAllEmployee(List<Employee> employee)
	{
		 employee1.addAll(employee);
		
		return employee1;
	}
	
	//1.Retrieve all employees in India
	
	public List<Employee> getAllEmployeeInIndia()
	{
		List<Employee> employee2 = employee1.stream()
								.filter(e->e.getLocation().getLocationCountry().equals("India"))
								.collect(Collectors.toList());

		return employee2;
		
	}
	
	//2.Retrieve employees who are in Chennai or Hyderabad

	public List<Employee> getAllEmployeeChennaiOrHyderabad()
	{
		List<Employee> employee2 = employee1.stream()
									.filter(e->e.getLocation().getLocationName().equals("Hyderabad") ||
											e.getLocation().getLocationName().equals("chennai"))
											.collect(Collectors.toList());

		return employee2;
		
	}
	
	
	//3. Retrieve employees who have Benefits and display benefits details

		public List<Employee> getAllEmployeewhoHaveBenefits()
		{
			List<Employee> employee3 = employee1.stream().filter(e->e.getBenefitId() != null).collect(Collectors.toList());

			return employee3;
			
		}
		
	//4.Retrieve employee details -  employeeId, employeeName, Salary, deptName, locationName, locationCountry
			
		public List<String> getAllEmployeeDetails()
		{
			List<String> employee4 = employee1.stream().map(e->"employeeId="+e.getEmployeeId()+" employeeName= "+e.getEmployeeName() +" Salary= "+e.getSalary()+" departmentName= "+e.getDepartment().getDepartmentName()+" locationName="+e.getLocation().getLocationName()+" locationCountry"+e.getLocation().getLocationCountry()).collect(Collectors.toList());
			return employee4;
			
		}
		
	//5.Retrieve employees who are in Chennai and India
		
		public List<Employee> getAllEmployeeInChennaiAndIndia()
		{
			List<Employee> employee5 = employee1.stream().filter(e->e.getLocation().getLocationCountry().equals("India") && e.getLocation().getLocationName().equals("chennai")).collect(Collectors.toList());

			return employee5;
			
		}
		
		public List<Employee> getOneEmployee(int id)
		{

			return employee1.stream().filter(emp->emp.getEmployeeId() == id).collect(Collectors.toList());
			
		}
		
		public void deleteOneEmployee(int id)
		{

			List<Employee> emp2 =	 employee1.stream().filter(emp->!(emp.getEmployeeId() == id)).collect(Collectors.toList());
			employee1.stream().filter(emp->!(emp.getEmployeeId() == id)).collect(Collectors.toList());

			employee1.clear();
			
		}



}
